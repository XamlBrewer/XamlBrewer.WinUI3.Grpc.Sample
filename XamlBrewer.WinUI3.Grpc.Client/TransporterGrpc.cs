// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/transporter.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Startrek {
  /// <summary>
  /// Transporter Room API
  /// </summary>
  public static partial class Transporter
  {
    static readonly string __ServiceName = "Startrek.Transporter";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Startrek.Location> __Marshaller_Startrek_Location = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Startrek.Location.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Startrek.LifeForm> __Marshaller_Startrek_LifeForm = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Startrek.LifeForm.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Startrek.Location, global::Startrek.Location> __Method_Lock = new grpc::Method<global::Startrek.Location, global::Startrek.Location>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Lock",
        __Marshaller_Startrek_Location,
        __Marshaller_Startrek_Location);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Startrek.Location, global::Startrek.LifeForm> __Method_BeamUp = new grpc::Method<global::Startrek.Location, global::Startrek.LifeForm>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BeamUp",
        __Marshaller_Startrek_Location,
        __Marshaller_Startrek_LifeForm);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Startrek.Location, global::Startrek.LifeForm> __Method_BeamUpParty = new grpc::Method<global::Startrek.Location, global::Startrek.LifeForm>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "BeamUpParty",
        __Marshaller_Startrek_Location,
        __Marshaller_Startrek_LifeForm);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Startrek.LifeForm, global::Startrek.Location> __Method_BeamDown = new grpc::Method<global::Startrek.LifeForm, global::Startrek.Location>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BeamDown",
        __Marshaller_Startrek_LifeForm,
        __Marshaller_Startrek_Location);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Startrek.LifeForm, global::Startrek.Location> __Method_BeamDownParty = new grpc::Method<global::Startrek.LifeForm, global::Startrek.Location>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "BeamDownParty",
        __Marshaller_Startrek_LifeForm,
        __Marshaller_Startrek_Location);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Startrek.LifeForm, global::Startrek.LifeForm> __Method_ReplaceParty = new grpc::Method<global::Startrek.LifeForm, global::Startrek.LifeForm>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ReplaceParty",
        __Marshaller_Startrek_LifeForm,
        __Marshaller_Startrek_LifeForm);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Startrek.TransporterReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Transporter</summary>
    [grpc::BindServiceMethod(typeof(Transporter), "BindService")]
    public abstract partial class TransporterBase
    {
      /// <summary>
      /// Lock the beam to a location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Startrek.Location> Lock(global::Startrek.Location request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Beam up a single life form from a location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Startrek.LifeForm> BeamUp(global::Startrek.Location request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Beam up a party of life forms to a location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task BeamUpParty(global::Startrek.Location request, grpc::IServerStreamWriter<global::Startrek.LifeForm> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Beam down a single life form, and return the location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Startrek.Location> BeamDown(global::Startrek.LifeForm request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Beam up a party of life forms, and return the location.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Startrek.Location> BeamDownParty(grpc::IAsyncStreamReader<global::Startrek.LifeForm> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Replace a beamed down party of life forms by another.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ReplaceParty(grpc::IAsyncStreamReader<global::Startrek.LifeForm> requestStream, grpc::IServerStreamWriter<global::Startrek.LifeForm> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Transporter</summary>
    public partial class TransporterClient : grpc::ClientBase<TransporterClient>
    {
      /// <summary>Creates a new client for Transporter</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TransporterClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Transporter that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TransporterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TransporterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TransporterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lock the beam to a location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Startrek.Location Lock(global::Startrek.Location request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Lock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lock the beam to a location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Startrek.Location Lock(global::Startrek.Location request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Lock, null, options, request);
      }
      /// <summary>
      /// Lock the beam to a location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Startrek.Location> LockAsync(global::Startrek.Location request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lock the beam to a location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Startrek.Location> LockAsync(global::Startrek.Location request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Lock, null, options, request);
      }
      /// <summary>
      /// Beam up a single life form from a location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Startrek.LifeForm BeamUp(global::Startrek.Location request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeamUp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Beam up a single life form from a location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Startrek.LifeForm BeamUp(global::Startrek.Location request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BeamUp, null, options, request);
      }
      /// <summary>
      /// Beam up a single life form from a location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Startrek.LifeForm> BeamUpAsync(global::Startrek.Location request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeamUpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Beam up a single life form from a location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Startrek.LifeForm> BeamUpAsync(global::Startrek.Location request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BeamUp, null, options, request);
      }
      /// <summary>
      /// Beam up a party of life forms to a location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Startrek.LifeForm> BeamUpParty(global::Startrek.Location request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeamUpParty(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Beam up a party of life forms to a location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Startrek.LifeForm> BeamUpParty(global::Startrek.Location request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_BeamUpParty, null, options, request);
      }
      /// <summary>
      /// Beam down a single life form, and return the location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Startrek.Location BeamDown(global::Startrek.LifeForm request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeamDown(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Beam down a single life form, and return the location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Startrek.Location BeamDown(global::Startrek.LifeForm request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BeamDown, null, options, request);
      }
      /// <summary>
      /// Beam down a single life form, and return the location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Startrek.Location> BeamDownAsync(global::Startrek.LifeForm request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeamDownAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Beam down a single life form, and return the location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Startrek.Location> BeamDownAsync(global::Startrek.LifeForm request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BeamDown, null, options, request);
      }
      /// <summary>
      /// Beam up a party of life forms, and return the location.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Startrek.LifeForm, global::Startrek.Location> BeamDownParty(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeamDownParty(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Beam up a party of life forms, and return the location.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Startrek.LifeForm, global::Startrek.Location> BeamDownParty(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_BeamDownParty, null, options);
      }
      /// <summary>
      /// Replace a beamed down party of life forms by another.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Startrek.LifeForm, global::Startrek.LifeForm> ReplaceParty(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplaceParty(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replace a beamed down party of life forms by another.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Startrek.LifeForm, global::Startrek.LifeForm> ReplaceParty(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_ReplaceParty, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TransporterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TransporterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TransporterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Lock, serviceImpl.Lock)
          .AddMethod(__Method_BeamUp, serviceImpl.BeamUp)
          .AddMethod(__Method_BeamUpParty, serviceImpl.BeamUpParty)
          .AddMethod(__Method_BeamDown, serviceImpl.BeamDown)
          .AddMethod(__Method_BeamDownParty, serviceImpl.BeamDownParty)
          .AddMethod(__Method_ReplaceParty, serviceImpl.ReplaceParty).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TransporterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Lock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Startrek.Location, global::Startrek.Location>(serviceImpl.Lock));
      serviceBinder.AddMethod(__Method_BeamUp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Startrek.Location, global::Startrek.LifeForm>(serviceImpl.BeamUp));
      serviceBinder.AddMethod(__Method_BeamUpParty, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Startrek.Location, global::Startrek.LifeForm>(serviceImpl.BeamUpParty));
      serviceBinder.AddMethod(__Method_BeamDown, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Startrek.LifeForm, global::Startrek.Location>(serviceImpl.BeamDown));
      serviceBinder.AddMethod(__Method_BeamDownParty, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Startrek.LifeForm, global::Startrek.Location>(serviceImpl.BeamDownParty));
      serviceBinder.AddMethod(__Method_ReplaceParty, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Startrek.LifeForm, global::Startrek.LifeForm>(serviceImpl.ReplaceParty));
    }

  }
}
#endregion
